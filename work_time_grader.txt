2:56 PM 4/7/2013Time worked:

1/22/2013 12:07-12:38  30min         Tue
1/23/2013 9:10-10:45   1hr 35min     Wed
          10:55-11:35  40min       
1/24/2013 2:50- 3:50   1hr           Thur
1/25/2013 12:50-2:40   1hr 50min     Fri
          3:55-5:45    1hr 50min   
1/26/2013 6:25-8:30    2hr 5min      Sat
          9:00-11:30   1hr 30min
Total: 10hrs 50min


Notes from HW1:
-Return of 0 often signifies no error. -1 Is more commonly used. 
-When writting comments for method headers if the return type is a primitive 
you cannot return null
-Add info on what happens if item in list is not found. 
-Loop termination upon finding the desired object/item in list/container 
-This pertains to question 10a. Students should start checking with 2nd element 
in the list and comparing to 1st element in the list instead of coming up with
dummy variables such as -100 for a quiz score. 
-students should check if they will be dividing by zero or null in 10b. 
-client vs implementation. Some students are making mistakes when it comes to 
questions that ask them to write java statements at a client level. They should
check/read about the difference as this is a topic that will come up again in 
this course. 
- the use of == vs equals() or compareTo() 
- off-by-one errors. 

Note: a few students had very bad syntax errors that they should not have as 3rd
semester java students. Not sure what to say more about that other than that they
will have a tough time. 

Time worked:
1/30/2013 7:00-7:50 Wed  50min
1/31/2013 6:45-9:15 Thur 2hrs 30min
2/1/2013  3:50-7:00 Fri 
          10:45-11:45    4hours 10min.
2/2/2013  4:00 - 6:30 Sat
          7:20 - 8:20    2hours 30min
1/3/2013  1:15-2:15 Sun  1 hour
Total: 11Hours 

1/4/2013  12:00-2:20 Mon              // tutored from 12-2:20 - Monday
           8:30-9:00     2hours 50min


Notes from hw2:
-Check that list is not empty
-Check if item is in the list boundaries 
-calling class methods inside a constructor is bad programming. 
-heavy use of existing methods inside other methods can be problematic if some of those
methods are ever changed. 

02/07/2013 9:00 - 10:45 Thur 1hr 45min
02/08/2013 3:20 - 6:20  Fri  3hr
02/09/2013 3:00 - 3:30  Sat  30min
02/10/2013 2:05 - 3:05  Sun    
	   6:04 - 7:14       2hrs 10min
Total: 10hr 15min


02/11/2013 12:00-2:00   Mon    2hrs          // tutored
02/12/2013 2:00- 3:10   Tue    1hr 10min
02/13/2013 9:35-10:45   Wed    1hr 10min
02/14/2013 1:50-7:10    Thur   5hrs 20min
Total: 9hrs 40min

Notes:
Q4 - replace method - did not check if pos was valid -1 point. 
Q4 - did not use equals() in if-statment -1 point 
Q5  - did not use equals() method -1 point
    - did not stop the search -1 point
Q4 - replace method -2 points. Did not do proper assignment 
Q6 - did not use compareTo() method -4 points. 
   
Q7 - did not check if list was empty -1 point 
   - did not reduce list length -1 point
Q5 - getMin() method. -1 point if not using compareTo() method 
Algorithmns - did not write method headers -1 point
Alg2 - did not check if nextNode is null. -1 point.
     - did not use compareTo() method -1 point 
     - did not terminate loop -1 point
Alg3 - should not use == to compare object data -1 point

NOTE: Extra-credit will not be added to your score here. It will be added to your grade elsewhere by Jessica. 
Extra Credit 
Arthur Lei - HW 3 - 9/10  
Brandon McKeand - HW 3 - 10/10 
Cequan Zhen - HW 3 - 10/10
Vignet Peter - HW 3 - 10/10
Sylvain Chambon - HW 3 - 10/10 
Theodorides Michael - HW 3 -  5/10
Derrick Lee - HW 3 - 10/10
Kenji Okamoto - HW 3 - 10/10 
Raeen Kourosh - HW 3 - 10/10
Alfredo Muller - HW 3- 10/10
Nyan Soe - HW 3 - 10/10

Largo Luong - HW 3 - 9/10
Jieming Chen - HW 3 - 10/10

Backpay: 41hours 45 min:: 

Feb16 - March 5th
Feb17: 1
Feb18: 5
Feb19: 5
Feb20: 5 45 min

41hr 45min - 16hr 45min = 25hrs

March5: 5
March10: 5

25hrs - 10hrs = 15hrs

March20: 5

25 - 5 = 20hrs left

April3: 5
April4: 5
April5: 1
April9: 5

20 - 16 = 4 hrs left
April22 4

REAL TIME SHEET HOURS!
Time worked:
2/21/13   3:00-3:20 x   Thursday
          3:40-5:00
          9:45-11:05
2/22/13   11:10 - 11:55pm x xFriday
2/23/13   9:10-10:55  x    Sat
          2:00-2:05
2/24/13   2:40-3:40   x    Sun
Total: 

2/25/13   12:00-2:00  x    Mon //tutored
          7:50-8:05
          9:15-10:15
2/26/13   5:30-7:00  x 
2/27/13   8:30-9:30  x
3/1/13    5:20-8:00   added to 2nd of march
          9:20-10:35  added to 2nd of march
3/2/13    1:15-1:45  x
          3:55-4:55  x
          5:40-6:25  x
3/4/13    12:00-2:00 x
          9:15-10:00 x
3/6/13    7:50-9:35  x
3/7/13    5:50-6:50  x
3/9/13    10:30-12:00 x	


New Week:
3/11/13   12:00 - 2:00 x
          10:40 - 11:10 x
3/13/13   3:27 - 5:42 x
          7:00 - 8:30 x
          9:15-  9:50 x
3/16/13   4:10- 6:10  x
3/17/13   12:00 - 2:00 x
3/18/13   12:00 - 2:00  x //tutoring
3/19/13   2:45 - 3:45   x
	  4:00 - 5:00   x
3/20/13   7:30 - 9:00   x
3/21/13   1:40 - 3:40   x
3/23/13   10:30am - 12:30 x pm Entered on 22nd 
3/24/13   1:45 - 2: 30    x      "     "
          4:35 - 4:50     x "     "
          7:20 - 8:20     x "     "
3/28/13   7:00 - 9:00     x "     "
3/29/13   8:35 - 10:35    x Entered on 22nd 

3/30/13   9:00- 11:00     x Added to 21st
3/31/13   3:07 - 3:40     x "     "
          3:56 - 5:24     x  "     "  
04/03/13  9:30 - 11:00    x
04/04/13  7:45 - 10:15    x
04/05/13  5:45 - 7:45     x
04/06/13  2:45 - 4:45     x
04/07/13  2:45 - 3:45     x
4/08/13   12:00 - 2:00    x
4/10/13   4:30 - 5:45     x
          6:05 - 7:00     x

4/11/13   6:00 - 8:00     x added to sun april 21
4/12/13   4:00 - 6:00     x added to sun april 21
4/13/13   2:15 - 4:15     x
4/15/13   12:00- 2:20     x
4/16/13   2:30 - 3:10     x
4/17/13   4:15 - 5:45     x
          6:10 - 6:40     x
4/18/13   1:25 - 2:40     x
          9:50 - 10:50    x
4/19/13   6:00 - 8:00     x
4/23/13   1:30 - 2:45     x
4/24/13   3:30 - 5:30     x
4/25/13   2:00 - 3:15     x   added to 28th 
          8:50 - 9:35     x   added to 28th
4/26/13   1:30 - 2:45     x   added to 5th 
          10:15 - 11:00   x   added to the 5th
4/27/13   5:30 - 6:30     x
          10:30 - 11:30   x
4/29/13   12:00 - 2:00    x
4/30/13   3:00 - 4:00     x
5/01/13   7:15 - 9:15     x
5/02/13   2:00 - 4:00     x
5/03/13   9:37 - 10:37    x
5/04/13   6:30 - 7:50     x
5/06/13   12:00 - 2:00    x
5/08/13   8:30 - 10:00    x

5/09/13   8:00 - 9:30           1hr 30min      ADDED TO May11
5/10/13   9:50 - 11:05          1hr 15min      ADDED TO May11
5/11/13   7:30 - 8:30           1hr 35min x
          10:00-10:35                     x  
5/12/13   2:17 - 3:15                     x
5/13/13   12:00 - 2:00          2hrs      x
5/14/13   4:00 - 5:00           1hr       x
5/15/13   3:45 - 4:45           1hr       x
5/16/13   8:50 - 9:50           1hr       x
5/17/13   8:40 - 9:40           1hr       x
5/18/13   10:30 - 11:30         1hr       x
5/19/13   5:15 - 6:00           45min     x
OWe 1hr

******************************
hw10E Extra Credit:

Peter Vignet 13

public void splice(ArrayQueue<T> anotherQueue)
{
   int tempIndex = anotherQueue.frontIndex;
 
   while (tempIndex != ((anotherQueue.backIndex + 2) % AnotherQueue.queue.length))
   {
      this.enqueue(AnotherQueue.queue[tempIndex];
      tempIndex = (tempIndex + 1) % anotherQueue.queue.length;
   }
}


import java.util.Comparator;
import java.util.PriorityQueue;
// The priority queue version
public static boolean isPalindromeForPQueue(String s) {
Comparator<charWithPriority> comparator = new CharacterComparator();
PriorityQueue<charWithPriority> myPQueue = new PriorityQueue<charWithPriority>(10, comparator);
int characterCount = s.length();
for (int index = 0; index < characterCount; index++)
{
char nextCharacter = s.charAt(index);
myPQueue.add(new charWithPriority(index + 1,nextCharacter));
}
StringBuilder newString = new StringBuilder();
while(!myPQueue.isEmpty())
newString = newString.append(myPQueue.poll().getCharacter());
return s.equals(newString.toString());
} // end isPalindromeForPQueue
To test the above method we also need the following two classes:
public class charWithPriority
{
private int id;
private char character;
public charWithPriority(int id, char c)
{
this.id = id;
this.character = c;
}
public int getId()
{
return id;
}
public char getCharacter()
{
return character;
}
} // end charWithPriority

import java.util.Comparator;
public class CharacterComparator implements Comparator<charWithPriority>
{
@Override
public int compare(charWithPriority c1, charWithPriority c2)
{
if (c1.getId() < c2.getId())
return 1;
if (c1.getId() > c2.getId())
return -1;
return 0;
}
} // end CharacterComparator
Name: Victor Malchikov

Page 357[434] #1 – 8
Page 409[508] #4, 5 
Page 430[529] #1 
Complete the Hashing with Linear Probing Exercise

Page 357
1. Revise the recursive method search in Segment 6 so that it looks at the last entry in the array.

public boolean contains(T anEntry)
{
	return search(0, length-1, anEntry)
}

//revised method starts here
private boolean search(int first, int last, T desiredItem)
{
	boolean found;
	
	if (last < first)
		found = false; //no more elements to search
	else if (desiredItem.equals(list[last]); //check if equal
		found = true;
	else 
		found = search(first, last-1, desiredItem); //check next
	return found;
}

2a. Write an iterative method contains for a sorted array search.

   public static boolean contains(int[] array, int anEntry)
   {
      for(int i = 0; i < array.length; i++)
      {
         if(array[i] == anEntry)
            return true;
         else if(array[i] > anEntry)
            return false;
      }
      return false;
   }


2b. Write a recursive method sarch that a method contains can call.

   private static boolean search(int[] array, int position, int entry)
   {
      boolean found = false;
      
      if(position == array.length)
         found = false;
      else if(array[position] > entry)
         found = false;
      else if(array[position] == entry)
         found = true;
      else
         found = search(array, position+1, entry);
      
      return found;
   }

3. How many comparisons are made by the recursive method search described in 2b when searching 
the array in Figure 6 for 8 and for 16:

Array in Figure 6: 2,4,5,7,8,10,12,15,18,21,24,26
When searching for 8 we compare 8 to the following values: 2, 4, 5, 7, and 8 = 5 comparisons 
When sarching for 16 we compare 16 to all values in the array = 12

4. Trace the method binarySearch in Segment 13 when searching for 4 in following array:

array: 5, 8, 10, 13, 15, 20, 22, 26, 30, 31, 34, 40

binarySearch(array, 0, 11, 4);
mid= 0+11/2 = 5 --> check array[5] = 20 --> 20 > 4
binarySearch(array, 0, mid-1, 4);
mid= 0+4/2 = 2 --> check array[2] = 10 --> 10 > 4
binarySearch(array, 0, mid-1, 4);
mid= 0+1/2 = 0 --> check array[0] = 5 --> 5 > 4
binarySearch(array, 0, mid-1, 4);
first > last --> return false.  //4 not in array

Repeat trace for 34:
binarySearch(array, 0, 11, 34);
mid=0+11/2=5 --> array[5] =20 --> 20<34
binarySearch(array,mid+1, 11);
mid= 6+11/2 = 8 --> array[8] =30 --> 30<34
binarySearch(array, mid+1, 34);
mid=8+1/11 = 10 --> array[10] = 34 --> 34 = 34
found = true

5. Modify binarySearch so that it returns the index of the first array element that 
equals the desiredItem. If the array does not contai nsuch an element return 
-(belongsAt+1) where belongsAt is the index of the array location that should contain
desiredItem.

   public static int binarySearch(int[] array, int first, int last, int desired) {

      if(first > last)
         return -(first+1);
      
      int mid = (first + last)/2;
      
      if(array[mid] == desired)
         return mid;
      else if(array[mid] > desired)
         return binarySearch(array, first, mid-1, desired);
      else
         return binarySearch(array, mid+1, last, desired);
 
   }
   
6. Implement a binary search iteratively.
 
   public static boolean binarySearchNew(int[] a, int desired) {
      
      int first = 0;
      int last = a.length-1;
      int mid = (first+last)/2;
      while(first <= last)
      {
         System.out.println("mid " + mid);
         if (a[mid] == desired)
            return true;
         else if(a[mid] > desired )
            last = mid-1;
         else
            first = mid+1;

         mid = (first+last)/2;
      }
      return false;
   }

7. Write a recursive method to find the largest object in an array-based lised. 
//Note: for simplicity I used an array of positive Integers 

   public static Integer largest(Integer[] array, int first, int last) {
          
      System.out.println("First is " + first + " Last is " + last);
      int mid = (first+last)/2;
      if(first == mid)
      {
         return array[first];
      }

      System.out.println("mid is " + mid);
      Integer a = largest(array, first, mid-1);
      Integer b = largest(array, mid+1, last);
      System.out.println("comparing " + a + " to " + b);
      if(a.compareTo(b) >= 0)
         return a;
      else
         return b;

   }
   
8. Search an unsorted array of objects that might contain duplicates. Return a list of indices of all
objets in the array that match a given object.

   public static ArrayList<Integer> duplicates(int[] array, int desired)
   {
      ArrayList<Integer> k = new ArrayList<Integer>(); 
      for(int i = 0; i < array.length; i++)
          if(array[i] == desired)
             k.add(i);
      return k;
   }

Page 409
4. Given hash table size of 31, using hash code from Segment 7, and separate chainig to resolve collisions.
List five diffferent names that would hash to the same location in the table. 
      System.out.println("Sonny".hashCode()%31);
      System.out.println("Sally".hashCode()%31);
      System.out.println("Sandy".hashCode()%31);
      System.out.println("Andy".hashCode()%31);
      System.out.println("Sonny".hashCode()%31);
	  
	  All of these come out to be 28. Since hashCode() method in java gives us same hash code obtained when
	  using code provided to us in section 7 these results are valid. 
	  
	  Here is hash code calculation for one of the names:
	  Sonny 
	  S   5(16)+3       83
	  o   6(16) +15     31(83) + 111
	  n   6(16) + 14    31(2684) + 110
	  n   6(16) + 14    31(83314) + 110
	  y   7(16) + 9     31(2582844) + 121 
	   
	  Hash code comes out to be 80068285. 80068285%31 = 28.
	
5. Assume that the hash table and hash function in Exercise 4 uses open addressing with linear 
probing to resolve collisions. List five different names that do not all hash to the same locations
but would still result in collisions and clustering.

You can use same names in exercise 4 but they would all map to the same locaiton. If you want 
different names that do not all map to the same location then you can use these names:
      System.out.println("Andy".hashCode()%31);    //28
      System.out.println("Sonny".hashCode()%31);   //28
	  System.out.println("Amy".hashCode()%31);     //28
      
      System.out.println("Mike".hashCode()%31);    //8
      System.out.println("Dave".hashCode()%31);    //8
     
      System.out.println("Erick".hashCode()%31);   //14
      System.out.println("Nick".hashCode()%31);    //14
	  
Since we are using linear probing this would result in clustering as we would have to start 
using up next available free space when collisions start to occur. 

Page 430
1a. Suppose that we are using open addressing to resolve collisions. Our hash table is getting full. 
We must avoid bad performance that results from a newarly full hash table by creating a larger 
has table. What steps should we take to move all of our entries to this new table?

We must expand the hash table by doubling the size of the hash table. If we are implementing the table based
on prime numbers then expanding the table entails expanding to a prime number that is at least twice its 
previous size. After we expand the table we typically will copy the data into it. However, since our data is 
stored and retrieved based on a specific algorithm that depends on the size of the hash table we cannot simply
copy the data into our table. 

Once we expanded our hash table we must change the hash function with it based on the new size of the table. 
(see 1b.)

1b. What happens to the hash function? 
The compression function (expressed as c % n, with c the hash code and n is the size of the table) will 
compute different indicies than it did for the original hash table because the size of our table increased.
As such, we cannot simply copy the data into our new table. We must use the dicationary method add to add 
each item in the original hash table to the new table based on a new hashing algorithm that uses the 
larger table size. 


Hashing with Linear Probing Exercise

a) Complete the return statement.
 
  public int h(StreetAddress key) {
	int streetNumber = nextInt(key); //gets street number 
	return streetNumber%TABLE_SIZE; //table size is a given constant of 7
  }

b) Complete the table below for the hash index returned for each address.
50 % 7 = 1
1400 % 7 = 0
750 % 7 = 1
800 % 7 = 2
940 % 7 = 2
106 % 7 = 1
1860 % 7 = 5

c) Using the entry order given above, insert these itno the hashTable using linear probing.

0 1400
1 50
2 750
3 800
4 940
5 106
6 1860

d) What is the number of seeks to find each campus?

50 Phelan -> 1
1400 Evans -> 1
750 Eddy -> 2
800 Mission -> 2
940 Filbert -> 3
106 Bartlett -> 5
1860 Hayes -> 2

e) Which campus has the worst case?
106 Bartlett 94110

f) How many seeks to determine a street address is not found?
Since we do not have an element with a null addrees then this will create an 
infinite loop. However, if the algorithm knows how many elements there are in 
the list (that is the table size) then it will be 7 for this table. 

g) Can you suggest ways to improve the efficiency? What TABLE_SIZE can you suggest?
I would recommend against using linear probing as this causes clusters which increase
the search time. Using Separate Chaining will improve efficiency of the alrogithm if 
paired with a better hashing mechanism that better spreads the distribution of addresses
in the hash table. 

Table size should also be increased to be at least number of elements + 1. This will help
the search algorithm. By increasing the table size to be larger than the number of elements 
we increase the possibility of having a space that contains null which is the stopping cue
for the search algorithm. 

